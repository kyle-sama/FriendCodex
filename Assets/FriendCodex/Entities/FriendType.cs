//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
namespace AssemblyCSharp
{
	public enum TypeName {MOODY,HAPPY, DRAMATIC, EASYGOING, SPUNKY, SLEEPY, GRUMPY, TRENDY, FUNNY, SERIOUS };

	public class FriendType
	{
		private List<FriendType> StrongAgainst{ get; set; }
		private List<FriendType> WeakAgainst{ get; set;}
		private TypeName typeName;
		private int Modifier{ get; set; }

		public FriendType (TypeName typeName, List<FriendType> strongAgainst, List<FriendType> weakAgainst)
		{
			this.typeName = typeName;
			this.StrongAgainst = strongAgainst;
			this.WeakAgainst = weakAgainst;
			Modifier = setModfier();
		}

		public int setModfier()
		{
			/*TO DO
			 * come up with formula thats type dependent
			*/
			switch(typeName)
			{
				case TypeName.DRAMATIC:
					break;
				case TypeName.EASYGOING:
					break;
				case TypeName.FUNNY:
					break;
				case TypeName.GRUMPY:
					break;
				case TypeName.HAPPY:
					break;
				case TypeName.MOODY:
					break;
				case TypeName.SERIOUS:
					break;
				case TypeName.SLEEPY:
					break;
				case TypeName.SPUNKY:
					break;
				case TypeName.TRENDY:
					break;

			}
			//Formula to determine modifier
			return 0;
		}
		//Instatiate each type 

		/*TO DO
			*initilaize the strong and weak against lists
		*/
		public static FriendType Moody= new FriendType(TypeName.MOODY, new List<FriendType>{},new List<FriendType> {});

		
	}

}

